@page "/travelbudget"
@using MickeyUtilityWeb.Services
@using MickeyUtilityWeb.Models
@using MickeyUtilityWeb.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject TravelBudgetService TravelBudgetService
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime JSRuntime
<link href="css/Travel/TravelBudget.css" rel="stylesheet" />
<link href="css/Shared/Toast.css" rel="stylesheet" />
<link href="css/Shared/ItemDetailInput.css" rel="stylesheet" />

<div class="travel-budget-container">
    <AuthorizeView>
        <Authorized>
            <h2 class="card-title">Travel Budget</h2>

            @if (isLoading)
            {
                <div class="loading-spinner"></div>
            }
            else if (errorMessage != null)
            {
                <div class="alert-danger">
                    <p>@errorMessage</p>
                    <button class="btn btn-primary" @onclick="TryAgain">Try Again</button>
                </div>
            }
            else
            {
                <div class="top-actions">
                    <button class="btn-icon btn-add" @onclick="ToggleNewItemForm">
                        <svg viewBox="0 0 24 24" class="add-icon">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" />
                        </svg>
                        <span>Add New Item</span>
                    </button>
                    <button class="btn-icon btn-save" @onclick="UpdateTravelBudget">
                        <svg viewBox="0 0 24 24" class="save-icon">
                            <path d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z" />
                        </svg>
                        <span>Save Changes</span>
                    </button>
                </div>

                <div class="budget-overview">
                    <h3>Budget Overview</h3>
                    <div class="budget-details">
                        <span>Total Budget: $@budget.ToString("F2")</span>
                        <span>Total Spent: $@totalSpent.ToString("F2")</span>
                        <span>Remaining: $@(budget - totalSpent)</span>
                    </div>
                    <div class="progress">
                        <div class="progress-bar" style="width: @progressPercentage%"></div>
                    </div>
                </div>

                <div class="search-container">
                    <span class="search-icon"></span>
                    <input type="text" placeholder="Search items..." @bind="searchTerm" @bind:event="oninput" class="search-input" />
                </div>

                <div class="travel-budget-items">
                    @foreach (var item in filteredItems)
                    {
                        <div class="travel-budget-item">
                            <div class="item-category" style="background-color: @GetCategoryColor(item.Category)">@item.Category</div>
                            <div class="item-content">
                                @if (expandedItems.Contains(item))
                                {
                                    <input type="text" class="item-name-edit" value="@item.Name" @onchange="(e) => UpdateItemName(item, e.Value.ToString())" />
                                }
                                else
                                {
                                    <span class="item-name">@item.Name</span>
                                }
                                <span class="item-price">$@item.Price.ToString("F2")</span>
                                <span class="item-date">@item.Date.ToString("MM/dd/yy")</span>
                                <span class="item-shop">@item.Shop</span>
                                <button class="btn-icon btn-edit" @onclick="() => ToggleItemExpand(item)">
                                    <svg viewBox="0 0 24 24" class="edit-icon">
                                        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" />
                                    </svg>
                                </button>
                            </div>
                            @if (expandedItems.Contains(item))
                            {
                                <div class="item-details">
                                    <ItemDetailInput Label="Category" Value="@item.Category" ValueChanged="@((string val) => { item.Category = val; StateHasChanged(); })" />
                                    <ItemDetailInput Label="Price" Value="@item.Price.ToString("F2")" ValueChanged="@((string val) => { if (decimal.TryParse(val, out decimal price)) { item.Price = price; StateHasChanged(); } })" Type="number" Step="0.01" />
                                    <ItemDetailInput Label="Date" Value="@item.Date.ToString("yyyy-MM-dd")" ValueChanged="@((string val) => { if (DateTime.TryParse(val, out DateTime date)) { item.Date = date; StateHasChanged(); } })" Type="date" />
                                    <ItemDetailInput Label="Shop" Value="@item.Shop" ValueChanged="@((string val) => { item.Shop = val; StateHasChanged(); })" />
                                    <button class="btn-icon btn-delete" @onclick="() => RemoveItem(item)">
                                        <svg viewBox="0 0 24 24" class="delete-icon">
                                            <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" />
                                        </svg>
                                    </button>
                                </div>
                            }
                        </div>
                    }
                </div>

                @if (showNewItemForm)
                {
                    <div class="modal-overlay" @onclick="ToggleNewItemForm">
                        <div class="new-item-form" @onclick:stopPropagation>
                            <h3>Add New Item</h3>
                            <ItemDetailInput Label="Name" Value="@newItem.Name" ValueChanged="@((string val) => { newItem.Name = val; StateHasChanged(); })" />
                            <ItemDetailInput Label="Category" Value="@newItem.Category" ValueChanged="@((string val) => { newItem.Category = val; StateHasChanged(); })" />
                            <ItemDetailInput Label="Price" Value="@newItem.Price.ToString("F2")" ValueChanged="@((string val) => { if (decimal.TryParse(val, out decimal price)) { newItem.Price = price; StateHasChanged(); } })" Type="number" Step="0.01" />
                            <ItemDetailInput Label="Date" Value="@newItem.Date.ToString("yyyy-MM-dd")" ValueChanged="@((string val) => { if (DateTime.TryParse(val, out DateTime date)) { newItem.Date = date; StateHasChanged(); } })" Type="date" />
                            <ItemDetailInput Label="Shop" Value="@newItem.Shop" ValueChanged="@((string val) => { newItem.Shop = val; StateHasChanged(); })" />
                            <div class="form-actions">
                                <button class="btn btn-secondary" @onclick="ToggleNewItemForm">Cancel</button>
                                <button class="btn btn-primary" @onclick="AddNewItem">Add Item</button>
                            </div>
                        </div>
                    </div>
                }
            }
        </Authorized>
        <NotAuthorized>
            <p>You need to log in to access the travel budget.</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

<Toast @ref="toast" />

@code {
    private List<TravelBudgetItem> travelBudgetItems = new List<TravelBudgetItem>();
    private TravelBudgetItem newItem = new TravelBudgetItem
        {
            Date = DateTime.Today
        };
    private bool isLoading = true;
    private string errorMessage;
    private string searchTerm = "";
    private Toast toast;
    private HashSet<TravelBudgetItem> expandedItems = new HashSet<TravelBudgetItem>();
    private bool showNewItemForm = false;
    private decimal budget = 0;

    private decimal totalSpent => travelBudgetItems.Sum(item => item.Price);
    private double progressPercentage => budget == 0 ? 0 : (double)totalSpent / (double)budget * 100;

    private IEnumerable<TravelBudgetItem> filteredItems => travelBudgetItems
        .Where(item => item.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                       item.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                       item.Shop.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .OrderByDescending(item => item.Date);

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (authState.User.Identity.IsAuthenticated)
        {
            await LoadTravelBudget();
        }
    }

    private async Task LoadTravelBudget()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            var result = await TravelBudgetService.GetTravelBudgetFromOneDrive();
            travelBudgetItems = result.Items;
            budget = result.Budget;
            await toast.ShowToast("Travel budget loaded successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading travel budget: {ex.Message}";
            await toast.ShowToast("Failed to load travel budget", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleNewItemForm()
    {
        showNewItemForm = !showNewItemForm;
    }

    private void UpdateItemName(TravelBudgetItem item, string newName)
    {
        item.Name = newName;
        StateHasChanged();
    }

    private string GetCategoryColor(string category)
    {
        return string.IsNullOrEmpty(category) ? "#6c757d" :
            $"hsl({Math.Abs(category.GetHashCode()) % 360}, 70%, 50%)";
    }

    private void ToggleItemExpand(TravelBudgetItem item)
    {
        if (expandedItems.Contains(item))
            expandedItems.Remove(item);
        else
            expandedItems.Add(item);
    }

    private async Task RemoveItem(TravelBudgetItem item)
    {
        try
        {
            await TravelBudgetService.DeleteTravelBudgetItem(item);
            travelBudgetItems.Remove(item);
            expandedItems.Remove(item);
            errorMessage = null;
            await toast.ShowToast("Item removed successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting item: {ex.Message}";
            await toast.ShowToast("Failed to remove item", "error");
        }
    }

    private async Task AddNewItem()
    {
        if (string.IsNullOrWhiteSpace(newItem.Name) || newItem.Price <= 0)
        {
            await toast.ShowToast("Name and Price are required fields", "error");
            return;
        }
        try
        {
            await TravelBudgetService.AddTravelBudgetItem(newItem);
            travelBudgetItems.Add(newItem);
            newItem = new TravelBudgetItem
                {
                    Date = DateTime.Today
                };
            errorMessage = null;
            await UpdateTravelBudget();
            await toast.ShowToast("New item added successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding new item: {ex.Message}";
            await toast.ShowToast("Failed to add new item", "error");
        }
    }

    private async Task UpdateTravelBudget()
    {
        try
        {
            await TravelBudgetService.UpdateTravelBudgetInOneDrive(travelBudgetItems);
            errorMessage = null;
            await toast.ShowToast("Travel budget updated successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating travel budget: {ex.Message}";
            await toast.ShowToast("Failed to update travel budget", "error");
        }
    }

    private void TryAgain()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}