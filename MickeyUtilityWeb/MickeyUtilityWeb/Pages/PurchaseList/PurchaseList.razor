@page "/purchaselist"
@using MickeyUtilityWeb.Services
@using MickeyUtilityWeb.Models
@using MickeyUtilityWeb.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject PurchaseListService PurchaseListService
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime JSRuntime
<link href="css/PurchaseList/PurchaseList.css" rel="stylesheet" />
<link href="css/Shared/Toast.css" rel="stylesheet" /
<link href="css/Shared/ItemDetailInput.css" rel="stylesheet" /
<div class="purchase-list-container">
    <AuthorizeView>
        <Authorized>
            <h2 class="card-title">Purchase Checklist</h2>

            @if (isLoading)
            {
                <div class="loading-spinner"></div>
            }
            else if (errorMessage != null)
            {
                <div class="alert-danger">
                    <p>@errorMessage</p>
                    <button class="btn btn-primary" @onclick="TryAgain">Try Again</button>
                </div>
            }
            else
            {
                <div class="budget-overview">
                    <h3>Budget Overview</h3>
                    <div class="budget-details">
                        <span>Total: $@totalBudget.ToString("F2")</span>
                        <span>Spent: $@spentBudget.ToString("F2")</span>
                    </div>
                    <div class="progress">
                        <div class="progress-bar" style="width: @progressPercentage%"></div>
                    </div>
                </div>

                <div class="search-container">
                    <span class="search-icon"></span>
                    <input type="text" placeholder="Search items..." @bind="searchTerm" @bind:event="oninput" class="search-input" />
                </div>

                <div class="purchase-items">
                    @foreach (var item in filteredItems)
                    {
                        <div class="purchase-item @(item.Purchased ? "purchased" : "") @(item.WarrantyDate < DateTime.Now ? "warranty-expired" : "")">
                            <div class="item-category">@item.Category</div>
                            <div class="item-content">
                                <input type="checkbox" checked="@item.Purchased" @onchange="() => TogglePurchased(item)" />
                                <span class="item-name">@item.Name</span>
                                <span class="item-price">$@(item.Price * item.Quantity)</span>
                                <span class="item-date purchase-date">@(item.PurchaseDate?.ToString("MM/dd/yy"))</span>
                                <span class="item-date warranty-date">@(item.WarrantyDate?.ToString("MM/dd/yy"))</span>
                                <button class="btn-icon btn-edit" @onclick="() => ToggleItemExpand(item)">
                                    <svg viewBox="0 0 24 24" class="edit-icon">
                                        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" />
                                    </svg>
                                </button>
                            </div>
                            @if (expandedItems.Contains(item))
                            {
                                <div class="item-details">
                                    <ItemDetailInput Label="Category" Value="@item.Category" ValueChanged="@((string val) => { item.Category = val; StateHasChanged(); })" />
                                    <ItemDetailInput Label="Price" Value="@item.Price.ToString("F2")" ValueChanged="@((string val) => { if (decimal.TryParse(val, out decimal price)) { item.Price = price; StateHasChanged(); } })" Type="number" Step="0.01" />
                                    <ItemDetailInput Label="Quantity" Value="@item.Quantity.ToString()" ValueChanged="@((string val) => { if (int.TryParse(val, out int qty)) { item.Quantity = qty; StateHasChanged(); } })" Type="number" />
                                    <ItemDetailInput Label="Purchase Date" Value="@(item.PurchaseDate.HasValue ? item.PurchaseDate.Value.ToString("yyyy-MM-dd") : "")" ValueChanged="@((string val) => { if (DateTime.TryParse(val, out DateTime date)) { item.PurchaseDate = date; StateHasChanged(); } })" Type="date" />
                                    <ItemDetailInput Label="Warranty Date" Value="@(item.WarrantyDate.HasValue ? item.WarrantyDate.Value.ToString("yyyy-MM-dd") : "")" ValueChanged="@((string val) => { if (DateTime.TryParse(val, out DateTime date)) { item.WarrantyDate = date; StateHasChanged(); } })" Type="date" />
                                    <button class="btn-icon btn-delete" @onclick="() => RemoveItem(item)">
                                        <svg viewBox="0 0 24 24" class="delete-icon">
                                            <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" />
                                        </svg>
                                    </button>
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="new-item-form">
                    <h3>Add New Item</h3>
                    <ItemDetailInput Label="Name" Value="@newItem.Name" ValueChanged="@((string val) => { newItem.Name = val; StateHasChanged(); })" />
                    <ItemDetailInput Label="Price" Value="@newItem.Price.ToString("F2")" ValueChanged="@((string val) => { if (decimal.TryParse(val, out decimal price)) { newItem.Price = price; StateHasChanged(); } })" Type="number" Step="0.01" />
                    <ItemDetailInput Label="Quantity" Value="@newItem.Quantity.ToString()" ValueChanged="@((string val) => { if (int.TryParse(val, out int qty)) { newItem.Quantity = qty; StateHasChanged(); } })" Type="number" />
                    <ItemDetailInput Label="Category" Value="@newItem.Category" ValueChanged="@((string val) => { newItem.Category = val; StateHasChanged(); })" />
                    <ItemDetailInput Label="Purchase Date" Value="@(newItem.PurchaseDate.HasValue ? newItem.PurchaseDate.Value.ToString("yyyy-MM-dd") : "")" ValueChanged="@((string val) => { if (DateTime.TryParse(val, out DateTime date)) { newItem.PurchaseDate = date; StateHasChanged(); } })" Type="date" />
                    <ItemDetailInput Label="Warranty Date" Value="@(newItem.WarrantyDate.HasValue ? newItem.WarrantyDate.Value.ToString("yyyy-MM-dd") : "")" ValueChanged="@((string val) => { if (DateTime.TryParse(val, out DateTime date)) { newItem.WarrantyDate = date; StateHasChanged(); } })" Type="date" />
                    <button class="btn-icon btn-add" @onclick="AddNewItem">
                        <svg viewBox="0 0 24 24" class="add-icon">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" />
                        </svg>
                    </button>
                </div>

                <div class="save-changes">
                    <button class="btn-icon btn-save" @onclick="UpdatePurchaseList">
                        <svg viewBox="0 0 24 24" class="save-icon">
                            <path d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z" />
                        </svg>
                        <span>Save Changes</span>
                    </button>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <p>You need to log in to access the purchase list.</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

<Toast @ref="toast" />

@code {
    private List<PurchaseItem> purchaseItems = new List<PurchaseItem>();
    private PurchaseItem newItem = new PurchaseItem
        {
            Quantity = 1,
            PurchaseDate = DateTime.Today,
            WarrantyDate = DateTime.Today.AddYears(1)
        };
    private bool isLoading = true;
    private string errorMessage;
    private string searchTerm = "";
    private Toast toast;
    private HashSet<PurchaseItem> expandedItems = new HashSet<PurchaseItem>();

    private decimal totalBudget => purchaseItems.Sum(item => item.Price * item.Quantity);
    private decimal spentBudget => purchaseItems.Where(item => item.Purchased).Sum(item => item.Price * item.Quantity);
    private double progressPercentage => totalBudget == 0 ? 0 : (double)spentBudget / (double)totalBudget * 100;

    private IEnumerable<PurchaseItem> filteredItems => purchaseItems
        .Where(item => item.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .OrderBy(item => item.Purchased);

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (authState.User.Identity.IsAuthenticated)
        {
            await LoadPurchaseList();
        }
    }

    private async Task LoadPurchaseList()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            purchaseItems = await PurchaseListService.GetPurchaseListFromOneDrive();
            await toast.ShowToast("Purchase list loaded successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading purchase list: {ex.Message}";
            await toast.ShowToast("Failed to load purchase list", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task TogglePurchased(PurchaseItem item)
    {
        item.Purchased = !item.Purchased;
        await UpdatePurchaseList();
        await toast.ShowToast($"Item {(item.Purchased ? "marked as purchased" : "unmarked")}", "info");
    }

    private void ToggleItemExpand(PurchaseItem item)
    {
        if (expandedItems.Contains(item))
            expandedItems.Remove(item);
        else
            expandedItems.Add(item);
    }

    private async Task RemoveItem(PurchaseItem item)
    {
        try
        {
            await PurchaseListService.DeletePurchaseItem(item);
            purchaseItems.Remove(item);
            expandedItems.Remove(item);
            errorMessage = null;
            await toast.ShowToast("Item removed successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting item: {ex.Message}";
            await toast.ShowToast("Failed to remove item", "error");
        }
    }

    private async Task AddNewItem()
    {
        if (string.IsNullOrWhiteSpace(newItem.Name) || newItem.Price <= 0)
        {
            await toast.ShowToast("Name and Price are required fields", "error");
            return;
        }
        try
        {
            await PurchaseListService.AddPurchaseItem(newItem);
            purchaseItems.Add(newItem);
            newItem = new PurchaseItem
                {
                    Quantity = 1,
                    PurchaseDate = DateTime.Today,
                    WarrantyDate = DateTime.Today.AddYears(1)
                };
            errorMessage = null;
            await UpdatePurchaseList();
            await toast.ShowToast("New item added successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding new item: {ex.Message}";
            await toast.ShowToast("Failed to add new item", "error");
        }
    }

    private async Task UpdatePurchaseList()
    {
        try
        {
            await PurchaseListService.UpdatePurchaseListInOneDrive(purchaseItems);
            errorMessage = null;
            await toast.ShowToast("Purchase list updated successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating purchase list: {ex.Message}";
            await toast.ShowToast("Failed to update purchase list", "error");
        }
    }

    private void TryAgain()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}