@page "/viewitinerary"
@using MickeyUtilityWeb.Models
@using MickeyUtilityWeb.Services
@inject SGItineraryService ItineraryService
<link href="css/Itinerary/Itinerary.css" rel="stylesheet" />
<link href="css/Shared/Icon.css" rel="stylesheet" />
<div class="itinerary-container">
    <h1 class="itinerary-title">Singapore Trip Itinerary</h1>
    @if (isLoading)
    {
        <div class="loading-spinner"></div>
    }
    else if (errorMessage != null)
    {
        <div class="error-message">@errorMessage</div>
    }
    else if (itineraryItems != null && itineraryItems.Any())
    {
        <div class="itinerary-tabs">
            @foreach (var day in itineraryItems.Select(item => item.Day).Distinct())
            {
                <button class="@GetTabClass(day)" @onclick="() => SetActiveTab(day)">
                     @day
                </button>
            }
        </div>
        <div class="itinerary-timeline">
            @foreach (var item in itineraryItems.Where(i => i.Day == activeTab))
            {
                <div class="@GetItemClass(item)">
                    <div class="itinerary-item-time">@item.TimeString</div>
                    <div class="itinerary-item-content">
                        <div class="@GetIconClass(item.Icon)"></div>
                        <div class="itinerary-item-details">
                            <h3 class="itinerary-item-activity">@item.Activity</h3>
                            @if (!string.IsNullOrEmpty(item.Location))
                            {
                                <p class="itinerary-item-location">@item.Location</p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No itinerary items found.</p>
    }
</div>

@code {
    private List<ItineraryItem> itineraryItems;
    private string activeTab = "1";
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            itineraryItems = await ItineraryService.GetItineraryFromOneDrive();
            if (itineraryItems.Any())
            {
                activeTab = itineraryItems.First().Day;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading itinerary: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetTabClass(string day)
    {
        return $"itinerary-tab {(activeTab == day ? "active" : "")}";
    }

    private void SetActiveTab(string day)
    {
        activeTab = day;
    }

    private string GetItemClass(ItineraryItem item)
    {
        return $"itinerary-item {(item.IsChecked ? "completed" : "")}";
    }

    private string GetIconClass(string icon)
    {
        if (string.IsNullOrEmpty(icon))
        {
            return "itinerary-icon itinerary-icon-default"; // Provide a default icon class
        }
        return $"itinerary-icon itinerary-icon-{icon.ToLower()}";
    }
}