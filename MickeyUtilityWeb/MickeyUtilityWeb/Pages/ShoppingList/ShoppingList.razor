@page "/shoppinglist"
@using MickeyUtilityWeb.Services
@using MickeyUtilityWeb.Models
@using MickeyUtilityWeb.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject ShoppingListService ShoppingListService
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime JSRuntime

<link href="css/Shared/pastelPurpleWeb.css" rel="stylesheet" />
<link href="css/Shared/Toast.css" rel="stylesheet" />

<div class="page-container">
    <AuthorizeView>
        <Authorized>
            <div class="page-header">
                <h1 class="page-title">Shopping List</h1>
                <div class="flip-clock">
                    <div class="flip-clock-item">@DateTime.Now.ToString("HH")</div>
                    <div class="flip-clock-item">@DateTime.Now.ToString("mm")</div>
                </div>
            </div>

            <div class="category-buttons">
                <button class="category-btn @(currentFilter == "all" ? "active" : "")" @onclick="@(() => FilterItems("all"))">All</button>
                <button class="category-btn @(currentFilter == "purchased" ? "active" : "")" @onclick="@(() => FilterItems("purchased"))">Purchased</button>
                <button class="category-btn @(currentFilter == "unpurchased" ? "active" : "")" @onclick="@(() => FilterItems("unpurchased"))">Unpurchased</button>
            </div>

            <div class="countdown-section">
                <h3>Weekend Countdown</h3>
                <p>@GetWeekendCountdown()</p>
            </div>

            <div class="progress-bars">
                <div class="progress-item">
                    <span>Year: @GetYearProgress()%</span>
                    <div class="progress-bar" style="width: @GetYearProgress()%"></div>
                </div>
                <div class="progress-item">
                    <span>Month: @GetMonthProgress()%</span>
                    <div class="progress-bar" style="width: @GetMonthProgress()%"></div>
                </div>
                <div class="progress-item">
                    <span>Week: @GetWeekProgress()%</span>
                    <div class="progress-bar" style="width: @GetWeekProgress()%"></div>
                </div>
                <div class="progress-item">
                    <span>Day: @GetDayProgress()%</span>
                    <div class="progress-bar" style="width: @GetDayProgress()%"></div>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="loading-spinner"></div>
            }
            else if (errorMessage != null)
            {
                <div class="alert-danger">
                    <p>@errorMessage</p>
                    <button @onclick="TryAgain">Try Again</button>
                </div>
            }
            else
            {
                <div class="form-grid">
                    <input type="text" class="input-small" placeholder="Add a new item..." @bind="newItem.Name" @bind:event="oninput" />
                    <input type="number" class="input-small" placeholder="Quantity" @bind="newItem.Quantity" />
                    <input type="text" class="input-small" placeholder="Category" @bind="newItem.Category" />
                    <button class="btn-primary" @onclick="AddNewItem">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </button>
                </div>

                <ul class="item-list">
                    @foreach (var item in FilteredShoppingItems)
                    {
                        <li class="list-item @(item.IsPurchased ? "completed" : "") @(item.IsDeleted ? "deleted" : "")">
                            <span class="item-category category-@item.Category.ToLower()">@item.Category</span>
                            @if (editingItem == item)
                            {
                                <div class="edit-form">
                                    <input type="text" class="edit-input" @bind="item.Name" />
                                    <input type="number" class="edit-input" @bind="item.Quantity" />
                                    <input type="text" class="edit-input" @bind="item.Category" />
                                    <div class="edit-actions">
                                        <button class="btn-save" @onclick="@(() => SaveEdit(item))">Save</button>
                                        <button class="btn-cancel" @onclick="CancelEdit">Cancel</button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <input type="checkbox" class="item-checkbox" checked="@item.IsPurchased" @onchange="@(() => TogglePurchased(item))" />
                                <div class="item-content">
                                    <span class="item-text">@item.Name</span>
                                    <span class="item-description">Quantity: @item.Quantity</span>
                                    <span class="item-created-at">Created: @item.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                    <span class="item-updated-at">Updated: @item.UpdatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                </div>
                                <div class="item-actions">
                                    <button class="btn-edit" @onclick="@(() => StartEdit(item))">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M11 4H4C3.46957 4 2.96086 4.21071 2.58579 4.58579C2.21071 4.96086 2 5.46957 2 6V20C2 20.5304 2.21071 21.0391 2.58579 21.4142C2.96086 21.7893 3.46957 22 4 22H18C18.5304 22 19.0391 21.7893 19.4142 21.4142C19.7893 21.0391 20 20.5304 20 20V13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                            <path d="M18.5 2.50001C18.8978 2.10219 19.4374 1.87869 20 1.87869C20.5626 1.87869 21.1022 2.10219 21.5 2.50001C21.8978 2.89784 22.1213 3.43741 22.1213 4.00001C22.1213 4.56262 21.8978 5.10219 21.5 5.50001L12 15L8 16L9 12L18.5 2.50001Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                        </svg>
                                    </button>
                                    <button class="btn-delete" @onclick="@(() => RemoveItem(item))">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M3 6H5H21M19 6V20C19 21.1046 18.1046 22 17 22H7C5.89543 22 5 21.1046 5 20V6M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                        </svg>
                                    </button>
                                </div>
                            }
                        </li>
                    }
                </ul>
            }
        </Authorized>
        <NotAuthorized>
            <p class="unauthorized-message">You need to log in to access the shopping list.</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

<Toast @ref="toast" />

@code {
    private List<ShoppingItem> shoppingItems = new List<ShoppingItem>();
    private ShoppingItem newItem = new ShoppingItem { Quantity = 1 };
    private bool isLoading = true;
    private string errorMessage;
    private Toast toast;
    private ShoppingItem editingItem;
    private string currentFilter = "all";

    private IEnumerable<ShoppingItem> FilteredShoppingItems => currentFilter switch
    {
        "purchased" => shoppingItems.Where(item => item.IsPurchased && !item.IsDeleted),
        "unpurchased" => shoppingItems.Where(item => !item.IsPurchased && !item.IsDeleted),
        _ => shoppingItems.Where(item => !item.IsDeleted)
    };

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (authState.User.Identity.IsAuthenticated)
        {
            await LoadShoppingList();
        }
    }

    private async Task LoadShoppingList()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            shoppingItems = await ShoppingListService.GetShoppingListFromOneDrive();
            await toast.ShowToast("Shopping list loaded successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading shopping list: {ex.Message}";
            await toast.ShowToast("Failed to load shopping list", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task TogglePurchased(ShoppingItem item)
    {
        item.IsPurchased = !item.IsPurchased;
        item.UpdatedAt = DateTimeOffset.Now;
        item.LastModifiedDate = DateTimeOffset.Now;
        await UpdateShoppingList();
        await toast.ShowToast($"Item {(item.IsPurchased ? "marked as purchased" : "marked as unpurchased")}", "info");
    }

    private async Task RemoveItem(ShoppingItem item)
    {
        try
        {
            await ShoppingListService.DeleteShoppingItem(item);
            shoppingItems.RemoveAll(i => i.Name == item.Name && i.CreatedAt == item.CreatedAt);
            errorMessage = null;
            await toast.ShowToast("Item removed successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting item: {ex.Message}";
            await toast.ShowToast("Failed to remove item", "error");
        }
    }

    private async Task AddNewItem()
    {
        if (string.IsNullOrWhiteSpace(newItem.Name))
        {
            await toast.ShowToast("Item name is required", "error");
            return;
        }
        try
        {
            newItem.CreatedAt = DateTimeOffset.Now;
            newItem.UpdatedAt = DateTimeOffset.Now;
            newItem.LastModifiedDate = DateTimeOffset.Now;
            await ShoppingListService.AddShoppingItem(newItem);
            shoppingItems.Add(newItem);
            newItem = new ShoppingItem { Quantity = 1 };
            errorMessage = null;
            await UpdateShoppingList();
            await toast.ShowToast("New item added successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding new item: {ex.Message}";
            await toast.ShowToast("Failed to add new item", "error");
        }
    }

    private async Task UpdateShoppingList()
    {
        try
        {
            await ShoppingListService.UpdateShoppingListInOneDrive(shoppingItems);
            errorMessage = null;
            await toast.ShowToast("Shopping list updated successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating shopping list: {ex.Message}";
            await toast.ShowToast("Failed to update shopping list", "error");
        }
    }

    private void TryAgain()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void StartEdit(ShoppingItem item)
    {
        editingItem = item;
    }

    private void CancelEdit()
    {
        editingItem = null;
    }

    private async Task SaveEdit(ShoppingItem item)
    {
        item.UpdatedAt = DateTimeOffset.Now;
        item.LastModifiedDate = DateTimeOffset.Now;
        editingItem = null;
        await UpdateShoppingList();
        await toast.ShowToast("Item updated successfully", "success");
    }

    private void FilterItems(string filter)
    {
        currentFilter = filter;
    }

    private string GetWeekendCountdown()
    {
        var now = DateTime.Now;
        var nextSaturday = now.Date.AddDays((int)DayOfWeek.Saturday - (int)now.DayOfWeek + 7).Date;
        var timeUntilWeekend = nextSaturday - now;
        return $"{timeUntilWeekend.Days}d {timeUntilWeekend.Hours}h {timeUntilWeekend.Minutes}m {timeUntilWeekend.Seconds}s";
    }

    private int GetYearProgress()
    {
        var now = DateTime.Now;
        return (int)((now - new DateTime(now.Year, 1, 1)).TotalDays / (now.Year % 4 == 0 ? 366.0 : 365.0) * 100);
    }

    private int GetMonthProgress()
    {
        var now = DateTime.Now;
        return (int)((now.Day - 1) / (double)(DateTime.DaysInMonth(now.Year, now.Month)) * 100);
    }

    private int GetWeekProgress()
    {
        var now = DateTime.Now;
        return (int)((now.DayOfWeek - DayOfWeek.Sunday) / 7.0 * 100);
    }

    private int GetDayProgress() => (int)((DateTime.Now.TimeOfDay.TotalSeconds / 86400) * 100);
}