@page "/purchaselist"
@using MickeyUtilityWeb.Services
@using MickeyUtilityWeb.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject PurchaseListService PurchaseListService
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider

<link href="css/PurchaseList/PurchaseList.css" rel="stylesheet" />

<AuthorizeView>
    <Authorized>
        <div class="card w-full max-w-3xl mx-auto">
            <div class="card-header">
                <h2 class="card-title">Purchase Checklist</h2>
                <div class="search-container">
                    <span class="search-icon"></span>
                    <input type="text" placeholder="Search items..." @bind="searchTerm" @bind:event="oninput" class="search-input" />
                </div>
            </div>
            <div class="card-content">
                @if (isLoading)
                {
                    <div class="loading-spinner"></div>
                }
                else if (errorMessage != null)
                {
                    <div class="alert-danger">
                        @errorMessage
                        <button class="btn btn-primary" @onclick="TryAgain">Try Again</button>
                    </div>
                }
                else
                {
                    <div class="mb-6">
                        <h3 class="text-lg font-semibold mb-2">Budget Overview</h3>
                        <div class="flex items-center justify-between mb-2">
                            <span>Total: $@totalBudget.ToString("F2")</span>
                            <span>Spent: $@spentBudget.ToString("F2")</span>
                        </div>
                        <div class="progress">
                            <div class="progress-bar" style="width: @progressPercentage%"></div>
                        </div>
                    </div>

                    <div class="space-y-4">
                        @foreach (var item in filteredItems)
                        {
                            <div class="flex items-center justify-between p-3 bg-gray-100 rounded-lg transition-colors duration-200 hover:bg-gray-200">
                                <div class="flex items-center space-x-3">
                                    <input type="checkbox" checked="@item.Purchased" @onchange="() => TogglePurchased(item)" class="w-5 h-5" />
                                    <div>
                                        <input class="font-medium @(item.Purchased ? "line-through text-gray-500" : "")" type="text" @bind="item.Name" @bind:event="oninput" />
                                        <input class="badge" type="text" @bind="item.Category" @bind:event="oninput" />
                                    </div>
                                </div>
                                <div class="flex items-center space-x-3">
                                    <input class="w-24 font-semibold" type="number" step="0.01" @bind="item.Price" @bind:event="oninput" />
                                    <span>x</span>
                                    <input class="w-16" type="number" @bind="item.Quantity" @bind:event="oninput" />
                                    <input class="w-32" type="date" @bind="item.PurchaseDate" @bind:format="yyyy-MM-dd" />
                                    <input class="w-32" type="date" @bind="item.WarrantyDate" @bind:format="yyyy-MM-dd" />
                                    <button class="btn btn-ghost btn-sm" @onclick="() => RemoveItem(item)">
                                        <span class="delete-icon"></span>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="mt-6">
                        <h3 class="text-lg font-semibold mb-2">Add New Item</h3>
                        <div class="flex space-x-2 flex-wrap">
                            <input type="text" placeholder="Item name" @bind="newItem.Name" class="flex-grow" />
                            <input type="number" step="0.01" placeholder="Price" @bind="newItem.Price" class="w-24" />
                            <input type="number" placeholder="Quantity" @bind="newItem.Quantity" class="w-24" />
                            <input type="text" placeholder="Category" @bind="newItem.Category" class="w-32" />
                            <input type="date" @bind="newItem.PurchaseDate" @bind:format="yyyy-MM-dd" class="w-32" />
                            <input type="date" @bind="newItem.WarrantyDate" @bind:format="yyyy-MM-dd" class="w-32" />
                            <button class="btn btn-primary" @onclick="AddNewItem">
                                <span class="add-icon"></span>
                                Add
                            </button>
                        </div>
                    </div>

                    <div class="mt-6">
                        <button class="btn btn-primary w-full" @onclick="UpdatePurchaseList">
                            Save Changes
                        </button>
                    </div>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You need to log in to access the purchase list.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private List<PurchaseItem> purchaseItems = new List<PurchaseItem>();
    private PurchaseItem newItem = new PurchaseItem { Quantity = 1 };
    private bool isLoading = true;
    private string errorMessage;
    private string searchTerm = "";

    private decimal totalBudget => purchaseItems.Sum(item => item.Price * item.Quantity);
    private decimal spentBudget => purchaseItems.Where(item => item.Purchased).Sum(item => item.Price * item.Quantity);
    private double progressPercentage => totalBudget == 0 ? 0 : (double)spentBudget / (double)totalBudget * 100;

    private IEnumerable<PurchaseItem> filteredItems => purchaseItems
        .Where(item => item.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .OrderBy(item => item.Purchased);

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (authState.User.Identity.IsAuthenticated)
        {
            await LoadPurchaseList();
        }
    }

    private async Task LoadPurchaseList()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            purchaseItems = await PurchaseListService.GetPurchaseListFromOneDrive();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading purchase list: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task TogglePurchased(PurchaseItem item)
    {
        item.Purchased = !item.Purchased;
        await UpdatePurchaseList();
    }

    private async Task RemoveItem(PurchaseItem item)
    {
        try
        {
            await PurchaseListService.DeletePurchaseItem(item);
            purchaseItems.Remove(item);
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting item: {ex.Message}";
        }
    }

    private async Task AddNewItem()
    {
        if (string.IsNullOrWhiteSpace(newItem.Name) || newItem.Price <= 0)
        {
            errorMessage = "Name and Price are required fields.";
            return;
        }
        try
        {
            await PurchaseListService.AddPurchaseItem(newItem);
            purchaseItems.Add(newItem);
            newItem = new PurchaseItem { Quantity = 1 };
            errorMessage = null;
            await UpdatePurchaseList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding new item: {ex.Message}";
        }
    }

    private async Task UpdatePurchaseList()
    {
        try
        {
            await PurchaseListService.UpdatePurchaseListInOneDrive(purchaseItems);
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating purchase list: {ex.Message}";
        }
    }

    private void TryAgain()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}