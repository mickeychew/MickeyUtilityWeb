@page "/purchasetrackerlist"
@using MickeyUtilityWeb.Services
@using MickeyUtilityWeb.Models
@using MickeyUtilityWeb.Services.SharedServices
@using MickeyUtilityWeb.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Globalization
@inject PurchaseTrackerService PurchaseTrackerService
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime JSRuntime
@inject EmojiIconService EmojiIconService

<link href="css/PurchaseList/purchasetracker.css" rel="stylesheet" />
<link href="css/Shared/Toast.css" rel="stylesheet" />

<div class="container @(isDarkMode ? "dark-mode" : "")">
    <AuthorizeView>
        <Authorized>
            <header class="header">
                <div class="header-top">
                    <div class="header-left">
                        <h1 class="title">Purchase Tracker</h1>
                        <div class="list-selector">
                            <label for="list-select">Selected List:</label>
                            <select id="list-select" @bind="selectedListKey" @bind:after="OnListSelectionChanged" class="select">
                                @foreach (var list in availableLists)
                                {
                                    <option value="@list.Key">@list.Key</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="header-right">
                        <div class="stats-widget">
                            <div class="total-cost">Total Cost: @FormatCurrency(GetTotalCost())</div>
                            <div class="item-count">Total Items: @purchaseItems.Count</div>
                            <div class="pending-payment">Payment Progress: @FormatPercentage(GetOverallPaymentProgress())%</div>
                        </div>
                        <div class="dark-mode-toggle">
                            <label class="switch">
                                <input type="checkbox" @bind="isDarkMode">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>
                <div class="action-buttons">
                    <button class="btn btn-add" @onclick="StartAddingItem">
                        <span class="icon">➕</span> Add Item
                    </button>
                    <button class="btn btn-view" @onclick="() => isGridView = !isGridView">
                        <span class="icon">@(isGridView ? "📋" : "📑")</span>
                        @(isGridView ? "List View" : "Grid View")
                    </button>
                </div>
            </header>

            @if (isLoading)
            {
                <div class="loading-spinner"></div>
            }
            else if (errorMessage != null)
            {
                <div class="error-message">
                    <p>@errorMessage</p>
                    <button class="retry-button" @onclick="TryAgain">Try Again</button>
                </div>
            }
            else
            {
                @if (isAddingItem)
                {
                    <div class="modal-overlay">
                        <div class="add-item-form">
                            <div class="form-header">
                                <h2><span class="icon">➕</span> Add New Item</h2>
                                <button class="btn-close" @onclick="CancelAddingItem">✕</button>
                            </div>
                            <div class="form-content">
                                <div class="form-section">
                                    <div class="section-header">
                                        <span class="icon">📝</span>
                                        <label>Product Details</label>
                                    </div>
                                    <div class="input-group">
                                        <div class="input-wrapper">
                                            <span class="input-icon">📦</span>
                                            <input type="text"
                                                   placeholder="Product Name"
                                                   @bind="newItem.ProductName"
                                                   class="form-input" />
                                        </div>
                                        <div class="input-wrapper">
                                            <span class="input-icon">🏷️</span>
                                            <select @bind="newItem.Category" class="form-input">
                                                <option value="">Select Category</option>
                                                @foreach (var icon in EmojiIconService.GetIcons())
                                                {
                                                    <option value="@icon.Key">@icon.Value.Emoji @icon.Value.DisplayName</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-section">
                                    <div class="section-header">
                                        <span class="icon">💰</span>
                                        <label>Price Details</label>
                                    </div>
                                    <div class="input-group">
                                        <div class="input-wrapper">
                                            <span class="input-icon">💵</span>
                                            <input type="number"
                                                   placeholder="Original Price"
                                                   @bind="newItem.OriginalPrice"
                                                   class="form-input" />
                                        </div>
                                        <div class="input-wrapper">
                                            <span class="input-icon">💳</span>
                                            <select @bind="paymentType" class="form-input">
                                                <option value="">Payment Status</option>
                                                <option value="free">Free Item</option>
                                                <option value="full">Full Payment</option>
                                                <option value="partial">Partial Payment</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-section">
                                    <div class="section-header">
                                        <span class="icon">🏪</span>
                                        <label>Shop Details</label>
                                    </div>
                                    <div class="input-group">
                                        <div class="input-wrapper">
                                            <span class="input-icon">🏢</span>
                                            <input type="text"
                                                   placeholder="Shop Name"
                                                   @bind="newItem.ShopName"
                                                   class="form-input" />
                                        </div>
                                        <div class="input-wrapper">
                                            <span class="input-icon">👤</span>
                                            <input type="text"
                                                   placeholder="Contact Person"
                                                   @bind="newItem.ContactPerson"
                                                   class="form-input" />
                                        </div>
                                    </div>
                                </div>

                                <div class="form-section">
                                    <div class="section-header">
                                        <span class="icon">📦</span>
                                        <label>Delivery Status</label>
                                    </div>
                                    <div class="delivery-toggle">
                                        <label class="toggle-switch">
                                            <input type="checkbox" @bind="newItem.IsItemReceived" />
                                            <span class="slider"></span>
                                            <span class="toggle-label">
                                                <span class="icon">@(newItem.IsItemReceived ? "✅" : "⏳")</span>
                                                @(newItem.IsItemReceived ? "Item Received" : "Item Pending")
                                            </span>
                                        </label>
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <button class="btn btn-save" @onclick="AddNewItem">
                                        <span class="icon">💾</span> Save
                                    </button>
                                    <button class="btn btn-cancel" @onclick="CancelAddingItem">
                                        <span class="icon">✖️</span> Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <div class="content-area">
                    @if (isGridView)
                    {
                        <div class="grid-view">
                            @foreach (var category in purchaseItems.Where(i => !i.IsDeleted)
                                                                  .Select(i => i.Category)
                                                                  .Distinct())
                            {
                                var categoryItems = purchaseItems.Where(i => i.Category == category && !i.IsDeleted);
                                var (emoji, displayName) = EmojiIconService.GetIcon(category);
                                var categoryColor = EmojiIconService.GetCategoryColor(category);

                                <div class="category-section @(IsCategoryExpanded(category) ? "expanded" : "")"
                                     style="--category-color: @categoryColor">
                                    <div class="category-header" @onclick="() => ToggleCategoryExpand(category)">
                                        <div class="category-title">
                                            <span class="category-emoji">@emoji</span>
                                            <span class="category-name">@displayName</span>
                                        </div>
                                        <div class="category-stats">
                                            <span class="item-count">
                                                <span class="icon">📦</span>
                                                @categoryItems.Count() items
                                            </span>
                                            <div class="payment-progress">
                                                <span class="icon">💰</span>
                                                @FormatCurrency(GetCategoryTotal(category))
                                            </div>
                                            <span class="expand-icon">
                                                @(IsCategoryExpanded(category) ? "🔽" : "▶️")
                                            </span>
                                        </div>
                                    </div>

                                    @if (IsCategoryExpanded(category))
                                    {
                                        <div class="items-grid">
                                            @foreach (var item in categoryItems)
                                            {
                                                if (editingItem?.ID == item.ID)
                                                {
                                                    <div class="item-card editing">
                                                        <div class="edit-form">
                                                            <div class="form-header">
                                                                <h3><span class="icon">✏️</span> Edit Item</h3>
                                                                <button class="btn-close" @onclick="CancelEdit">✕</button>
                                                            </div>
                                                            <div class="form-content">
                                                                <div class="form-section">
                                                                    <div class="section-header">
                                                                        <span class="icon">📝</span>
                                                                        <label>Product Details</label>
                                                                    </div>
                                                                    <div class="input-group">
                                                                        <div class="input-wrapper">
                                                                            <span class="input-icon">📦</span>
                                                                            <input type="text"
                                                                                   placeholder="Product Name"
                                                                                   @bind="editingItem.ProductName"
                                                                                   class="form-input" />
                                                                        </div>
                                                                        <div class="input-wrapper">
                                                                            <span class="input-icon">🏷️</span>
                                                                            <select @bind="editingItem.Category" class="form-input">
                                                                                <option value="">Select Category</option>
                                                                                @foreach (var icon in EmojiIconService.GetIcons())
                                                                                {
                                                                                    <option value="@icon.Key">@icon.Value.Emoji @icon.Value.DisplayName</option>
                                                                                }
                                                                            </select>
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                                <div class="form-section">
                                                                    <div class="section-header">
                                                                        <span class="icon">💰</span>
                                                                        <label>Price Details</label>
                                                                    </div>
                                                                    <div class="input-group">
                                                                        <div class="input-wrapper">
                                                                            <span class="input-icon">💵</span>
                                                                            <input type="number"
                                                                                   placeholder="Original Price"
                                                                                   @bind="editingItem.OriginalPrice"
                                                                                   class="form-input" />
                                                                        </div>
                                                                        <div class="input-wrapper">
                                                                            <span class="input-icon">💳</span>
                                                                            <select value="@paymentType"
                                                                                    @onchange="@(e => {
            paymentType = e.Value?.ToString();
            HandlePaymentTypeChange(e, editingItem);
        })"
                                                                                    class="form-input">
                                                                                <option value="">Payment Status</option>
                                                                                <option value="free">Free Item</option>
                                                                                <option value="full">Full Payment</option>
                                                                                <option value="partial">Partial Payment</option>
                                                                            </select>
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                                <div class="form-section">
                                                                    <div class="section-header">
                                                                        <span class="icon">🏪</span>
                                                                        <label>Shop Details</label>
                                                                    </div>
                                                                    <div class="input-group">
                                                                        <div class="input-wrapper">
                                                                            <span class="input-icon">🏢</span>
                                                                            <input type="text"
                                                                                   placeholder="Shop Name"
                                                                                   @bind="editingItem.ShopName"
                                                                                   class="form-input" />
                                                                        </div>
                                                                        <div class="input-wrapper">
                                                                            <span class="input-icon">👤</span>
                                                                            <input type="text"
                                                                                   placeholder="Contact Person"
                                                                                   @bind="editingItem.ContactPerson"
                                                                                   class="form-input" />
                                                                        </div>
                                                                    </div>
                                                                </div>

                                                                <div class="form-section">
                                                                    <div class="section-header">
                                                                        <span class="icon">📦</span>
                                                                        <label>Delivery Status</label>
                                                                    </div>
                                                                    <div class="delivery-toggle">
                                                                        <label class="toggle-switch">
                                                                            <input type="checkbox" @bind="editingItem.IsItemReceived" />
                                                                            <span class="slider"></span>
                                                                            <span class="toggle-label">
                                                                                <span class="icon">@(editingItem.IsItemReceived ? "✅" : "⏳")</span>
                                                                                @(editingItem.IsItemReceived ? "Item Received" : "Item Pending")
                                                                            </span>
                                                                        </label>
                                                                    </div>
                                                                    <div class="form-section">
                                                                        <div class="section-header">
                                                                            <span class="icon">📅</span>
                                                                            <label>Important Dates</label>
                                                                        </div>
                                                                        <div class="dates-container">
                                                                            <div class="date-card">
                                                                                <div class="date-card-header">
                                                                                    <span class="date-icon">💳</span>
                                                                                    <label>Purchase Date</label>
                                                                                </div>
                                                                                <input type="date"
                                                                                       @bind="editingItem.DepositPaymentDate"
                                                                                       class="form-input" />
                                                                            </div>

                                                                            <div class="date-card">
                                                                                <div class="date-card-header">
                                                                                    <span class="date-icon">🛡️</span>
                                                                                    <label>Warranty Date</label>
                                                                                </div>
                                                                                <input type="date"
                                                                                       @bind="editingItem.WarrantyDate"
                                                                                       class="form-input" />
                                                                            </div>

                                                                            <div class="date-card">
                                                                                <div class="date-card-header">
                                                                                    <span class="date-icon">🚚</span>
                                                                                    <label>Expected Delivery</label>
                                                                                </div>
                                                                                <input type="date"
                                                                                       @bind="editingItem.ExpectedDeliveryDate"
                                                                                       class="form-input" />
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div><div class="form-actions">
                                                                    <button class="btn btn-save" @onclick="SaveEdit">
                                                                        <span class="icon">💾</span> Save
                                                                    </button>
                                                                    <button class="btn btn-cancel" @onclick="CancelEdit">
                                                                        <span class="icon">✖️</span> Cancel
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="item-card @(item.IsItemReceived ? "received" : "pending")">
                                                        <div class="item-header">
                                                            <div class="item-title">
                                                                <h3>
                                                                    <span class="icon">📦</span>
                                                                    @item.ProductName
                                                                </h3>
                                                                <div class="item-status">
                                                                    <span class="status-badge @(item.IsItemReceived ? "received" : "pending")">
                                                                        <span class="icon">@(item.IsItemReceived ? "✅" : "⏳")</span>
                                                                        @(item.IsItemReceived ? "Received" : "Pending")
                                                                    </span>
                                                                </div>
                                                            </div>
                                                            <div class="price-info">
                                                                @if (item.HasDiscount)
                                                                {
                                                                    <span class="original-price">
                                                                        <span class="icon">💰</span>
                                                                        @FormatCurrency(item.OriginalPrice)
                                                                    </span>
                                                                    <span class="discount">
                                                                        <span class="icon">🏷️</span>
                                                                        @(item.DiscountPercentage.HasValue
                                                                            ? $"-{item.DiscountPercentage:F1}%"
                                                                            : $"-{FormatCurrency(item.DiscountAmount)}")
                                                                    </span>
                                                                }
                                                                <span class="final-price">
                                                                    <span class="icon">💵</span>
                                                                    @FormatCurrency(item.ItemPrice)
                                                                </span>
                                                            </div>
                                                        </div>

                                                        <div class="item-details">
                                                            @if (!string.IsNullOrEmpty(item.ShopName))
                                                            {
                                                                <div class="detail-row">
                                                                    <span class="label">
                                                                        <span class="icon">🏪</span>
                                                                        Shop:
                                                                    </span>
                                                                    <span class="value">@item.ShopName</span>
                                                                </div>
                                                            }
                                                            @if (!string.IsNullOrEmpty(item.InvoiceNumber))
                                                            {
                                                                <div class="detail-row">
                                                                    <span class="label">
                                                                        <span class="icon">📄</span>
                                                                        Invoice:
                                                                    </span>
                                                                    <span class="value">@item.InvoiceNumber</span>
                                                                </div>
                                                            }
                                                            @if (!string.IsNullOrEmpty(item.ContactPerson))
                                                            {
                                                                <div class="detail-row">
                                                                    <span class="label">
                                                                        <span class="icon">👤</span>
                                                                        Contact:
                                                                    </span>
                                                                    <span class="value">@item.ContactPerson</span>
                                                                </div>
                                                            }
                                                            @if (!string.IsNullOrEmpty(item.ContactNumber))
                                                            {
                                                                <div class="detail-row">
                                                                    <span class="label">
                                                                        <span class="icon">📞</span>
                                                                        Phone:
                                                                    </span>
                                                                    <span class="value">@item.ContactNumber</span>
                                                                </div>
                                                            }
                                                        </div>

                                                        <div class="payment-status @GetPaymentStatusClass(item)">
                                                            <div class="status-header">
                                                                <span class="icon">💳</span>
                                                                <span class="status-text">@item.PaymentProgress</span>
                                                            </div>
                                                            <div class="payment-details">
                                                                <div class="payment-type">
                                                                    <span class="icon">💳</span>
                                                                    <span>@item.PaymentType</span>
                                                                </div>
                                                                @if (item.DepositAmount > 0)
                                                                {
                                                                    <div class="deposit-amount">
                                                                        <span class="icon">💰</span>
                                                                        <span>Deposit: @FormatCurrency(item.DepositAmount)</span>
                                                                    </div>
                                                                }
                                                                @if (item.TotalPaid > 0)
                                                                {
                                                                    <div class="total-paid">
                                                                        <span class="icon">💵</span>
                                                                        <span>Paid: @FormatCurrency(item.TotalPaid)</span>
                                                                    </div>
                                                                }
                                                                @if (item.RemainingAmount > 0)
                                                                {
                                                                    <div class="remaining-amount">
                                                                        <span class="icon">⚠️</span>
                                                                        <span>Remaining: @FormatCurrency(item.RemainingAmount)</span>
                                                                    </div>
                                                                }
                                                                @if (item.SoldAmount > 0)
                                                                {
                                                                    <div class="sold-amount">
                                                                        <span class="icon">🏷️</span>
                                                                        <span>Sold: @FormatCurrency(item.SoldAmount)</span>
                                                                    </div>
                                                                }
                                                            </div>
                                                            <div class="progress-bar">
                                                                <div class="progress-fill" style="width: @(item.PaymentProgress?.TrimEnd('%'))%"></div>
                                                            </div>
                                                        </div>

                                                        <div class="delivery-status">
                                                            <label class="toggle-switch">
                                                                <input type="checkbox"
                                                                       checked="@item.IsItemReceived"
                                                                       @onchange="@(e => ToggleReceived(item))" />
                                                                <span class="slider"></span>
                                                                <span class="toggle-label">
                                                                    <span class="icon">@(item.IsItemReceived ? "✅" : "⏳")</span>
                                                                    @(item.IsItemReceived ? "Item Received" : "Item Pending")
                                                                </span>
                                                            </label>
                                                        </div>
                                                        <div class="dates-section">
                                                            <div class="info-section delivery-section">
                                                                <div class="info-icon">📅</div>
                                                                <div class="info-content">
                                                                    <div class="info-label">Delivery & Warranty</div>
                                                                    <div class="dates-container">
                                                                        <!-- Delivery Date Card -->
                                                                        <div class="date-card @GetDeliveryDateStatus(item.ExpectedDeliveryDate)">
                                                                            <div class="date-card-header">
                                                                                <span class="date-icon">🚚</span>
                                                                                <span class="date-label">Expected Delivery</span>
                                                                            </div>
                                                                            @if (item.ExpectedDeliveryDate.HasValue)
                                                                            {
                                                                                <div class="date-info">
                                                                                    <div class="primary-date">@item.ExpectedDeliveryDate.Value.ToString("MMM d", CultureInfo.InvariantCulture)</div>
                                                                                    <div class="secondary-date">@item.ExpectedDeliveryDate.Value.ToString("yyyy", CultureInfo.InvariantCulture)</div>
                                                                                </div>
                                                                                <div class="date-status">
                                                                                    @{
                                                                                        var deliveryDays = GetDaysUntil(item.ExpectedDeliveryDate);
                                                                                        @GetDateStatusText(deliveryDays, "delivery")
                                                                                    }
                                                                                </div>
                                                                            }
                                                                            else
                                                                            {
                                                                                <div class="no-date">Not Set</div>
                                                                            }
                                                                        </div>

                                                                        <!-- Purchase Date Card -->
                                                                        <div class="date-card">
                                                                            <div class="date-card-header">
                                                                                <span class="date-icon">💳</span>
                                                                                <span class="date-label">Purchase Date</span>
                                                                            </div>
                                                                            @if (item.DepositPaymentDate.HasValue)
                                                                            {
                                                                                <div class="date-info">
                                                                                    <div class="primary-date">@item.DepositPaymentDate.Value.ToString("MMM d", CultureInfo.InvariantCulture)</div>
                                                                                    <div class="secondary-date">@item.DepositPaymentDate.Value.ToString("yyyy", CultureInfo.InvariantCulture)</div>
                                                                                </div>
                                                                                <div class="date-status">
                                                                                    @{
                                                                                        var depositDays = (DateTime.Today - item.DepositPaymentDate.Value).Days;
                                                                                        if (depositDays == 0)
                                                                                        {
                                                                                            <span>Today</span>
                                                                                        }
                                                                                        else if (depositDays > 0)
                                                                                        {
                                                                                            <span>@depositDays @(depositDays == 1 ? "day" : "days") ago</span>
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            <span>In @Math.Abs(depositDays) @(Math.Abs(depositDays) == 1 ? "day" : "days")</span>
                                                                                        }
                                                                                    }
                                                                                </div>
                                                                            }
                                                                            else
                                                                            {
                                                                                <div class="no-date">Not Set</div>
                                                                            }
                                                                        </div>

                                                                        <!-- Warranty Date Card -->
                                                                        <div class="date-card @GetWarrantyDateStatus(item.WarrantyDate)">
                                                                            <div class="date-card-header">
                                                                                <span class="date-icon">🛡️</span>
                                                                                <span class="date-label">Warranty Until</span>
                                                                            </div>
                                                                            @if (item.WarrantyDate.HasValue)
                                                                            {
                                                                                <div class="date-info">
                                                                                    <div class="primary-date">@item.WarrantyDate.Value.ToString("MMM d", CultureInfo.InvariantCulture)</div>
                                                                                    <div class="secondary-date">@item.WarrantyDate.Value.ToString("yyyy", CultureInfo.InvariantCulture)</div>
                                                                                </div>
                                                                                <div class="date-status">
                                                                                    @{
                                                                                        var warrantyDays = GetDaysUntil(item.WarrantyDate);
                                                                                        @GetDateStatusText(warrantyDays, "warranty")
                                                                                    }
                                                                                </div>
                                                                            }
                                                                            else
                                                                            {
                                                                                <div class="no-date">Not Set</div>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="item-actions">
                                                            <button class="btn btn-edit" @onclick="() => StartEdit(item)">
                                                                <span class="icon">✏️</span>
                                                                Edit
                                                            </button>
                                                            <button class="btn btn-delete" @onclick="() => RemoveItem(item)">
                                                                <span class="icon">🗑️</span>
                                                                Delete
                                                            </button>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="list-view">
                            @foreach (var category in purchaseItems.Where(i => !i.IsDeleted)
                           .Select(i => i.Category)
                           .Distinct())
                            {
                                var categoryItems = purchaseItems.Where(i => i.Category == category && !i.IsDeleted);
                                var (emoji, displayName) = EmojiIconService.GetIcon(category);
                                var categoryColor = EmojiIconService.GetCategoryColor(category);

                                <div class="category-section @(IsCategoryExpanded(category) ? "expanded" : "")"
                                     style="--category-color: @categoryColor">
                                    <div class="category-header" @onclick="() => ToggleCategoryExpand(category)">
                                        <div class="category-title">
                                            <span class="category-emoji">@emoji</span>
                                            <span class="category-name">@displayName</span>
                                        </div>
                                        <div class="category-stats">
                                            <span class="item-count">
                                                <span class="icon">📦</span>
                                                @categoryItems.Count() items
                                            </span>
                                            <span class="total-amount">
                                                <span class="icon">💰</span>
                                                @FormatCurrency(GetCategoryTotal(category))
                                            </span>
                                            <span class="expand-icon">
                                                @(IsCategoryExpanded(category) ? "🔽" : "▶️")
                                            </span>
                                        </div>
                                    </div>

                                    @if (IsCategoryExpanded(category))
                                    {
                                        <div class="items-table-wrapper">
                                            <div class="items-table">
                                                <table>
                                                    <thead>
                                                        <tr>
                                                            <th>
                                                                <span class="icon">📦</span>
                                                                Product
                                                            </th>
                                                            <th>
                                                                <span class="icon">💰</span>
                                                                Price
                                                            </th>
                                                            <th>
                                                                <span class="icon">💳</span>
                                                                Payment
                                                            </th>
                                                            <th>
                                                                <span class="icon">📦</span>
                                                                Status
                                                            </th>
                                                            <th>
                                                                <span class="icon">⚙️</span>
                                                                Actions
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in categoryItems)
                                                        {
                                                            <tr class="@(item.IsItemReceived ? "received" : "pending")">
                                                                <td>
                                                                    <div class="product-info">
                                                                        <span class="name">
                                                                            <span class="icon">📦</span>
                                                                            @item.ProductName
                                                                        </span>
                                                                        @if (!string.IsNullOrEmpty(item.ShopName))
                                                                        {
                                                                            <span class="shop">
                                                                                <span class="icon">🏪</span>
                                                                                @item.ShopName
                                                                            </span>
                                                                        }
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                    <div class="price-info">
                                                                        @if (item.HasDiscount)
                                                                        {
                                                                            <span class="original-price">
                                                                                <span class="icon">💰</span>
                                                                                @FormatCurrency(item.OriginalPrice)
                                                                            </span>
                                                                            <span class="discount">
                                                                                <span class="icon">🏷️</span>
                                                                                @(item.DiscountPercentage.HasValue
                                                                                    ? $"-{item.DiscountPercentage:F1}%"
                                                                                    : $"-{FormatCurrency(item.DiscountAmount)}")
                                                                            </span>
                                                                        }
                                                                        <span class="final-price">
                                                                            <span class="icon">💵</span>
                                                                            @FormatCurrency(item.ItemPrice)
                                                                        </span>
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                    <div class="payment-status @GetPaymentStatusClass(item)">
                                                                        <span class="icon">💳</span>
                                                                        @item.PaymentProgress
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                    <div class="delivery-toggle">
                                                                        <label class="toggle-switch">
                                                                            <input type="checkbox"
                                                                                   checked="@item.IsItemReceived"
                                                                                   @onchange="@(e => ToggleReceived(item))" />
                                                                            <span class="slider"></span>
                                                                            <span class="status-icon">
                                                                                @(item.IsItemReceived ? "✅" : "⏳")
                                                                            </span>
                                                                        </label>
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                    <div class="item-actions">
                                                                        <button class="btn btn-icon" @onclick="() => StartEdit(item)">
                                                                            <span class="icon">✏️</span>
                                                                        </button>
                                                                        <button class="btn btn-icon" @onclick="() => RemoveItem(item)">
                                                                            <span class="icon">🗑️</span>
                                                                        </button>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <div class="unauthorized">
                <span class="icon">🔒</span>
                Please log in to access the purchase tracker.
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

<Toast @ref="toast" />

@code {
    private List<PurchaseTrackerItem> purchaseItems = new List<PurchaseTrackerItem>();
    private PurchaseTrackerItem newItem = new PurchaseTrackerItem();
    private bool isLoading = true;
    private string errorMessage;
    private Toast toast;
    private PurchaseTrackerItem editingItem;
    private List<ExcelListItem> availableLists = new List<ExcelListItem>();
    private string selectedListKey = "";
    private string paymentType = "";
    private bool isDarkMode = false;
    private bool isGridView = true;
    private bool isAddingItem = false;
    private HashSet<string> expandedCategories = new HashSet<string>();

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (authState.User.Identity.IsAuthenticated)
        {
            await LoadAvailableLists();
            if (availableLists.Any())
            {
                selectedListKey = availableLists.First().Key;
                await LoadPurchaseList();
            }
        }
    }

    private async Task LoadAvailableLists()
    {
        try
        {
            availableLists = await PurchaseTrackerService.GetAvailableLists();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading lists: {ex.Message}";
            await toast.ShowToast("Failed to load lists", "error");
        }
    }

    private async Task OnListSelectionChanged()
    {
        await LoadPurchaseList();
    }

    private async Task LoadPurchaseList()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            purchaseItems = await PurchaseTrackerService.GetPurchaseListFromOneDrive(selectedListKey);
            await toast.ShowToast("List loaded successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading list: {ex.Message}";
            await toast.ShowToast("Failed to load list", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void StartAddingItem()
    {
        isAddingItem = true;
        newItem = new PurchaseTrackerItem
            {
                ExpectedDeliveryDate = DateTime.Today,
                PaymentType = "Cash",
                PaymentProgress = "0%"
            };
        editingItem = null;
    }

    private void CancelAddingItem()
    {
        isAddingItem = false;
        newItem = new PurchaseTrackerItem();
        paymentType = "";
    }

    private async Task ToggleReceived(PurchaseTrackerItem item)
    {
        item.IsItemReceived = !item.IsItemReceived;
        item.UpdatedAt = DateTime.Now;
        item.LastModifiedDate = DateTime.Now;
        await UpdatePurchaseList();
        await toast.ShowToast($"Item {(item.IsItemReceived ? "marked as received" : "marked as pending")}", "info");
    }

    private async Task RemoveItem(PurchaseTrackerItem item)
    {
        try
        {
            purchaseItems = await PurchaseTrackerService.DeletePurchaseItem(selectedListKey, item);
            errorMessage = null;
            await toast.ShowToast("Item removed", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error removing item: {ex.Message}";
            await toast.ShowToast("Failed to remove item", "error");
        }
    }

    private async Task AddNewItem()
    {
        if (string.IsNullOrWhiteSpace(newItem.ProductName))
        {
            await toast.ShowToast("Product name is required", "error");
            return;
        }

        try
        {
            if (!string.IsNullOrEmpty(paymentType))
            {
                newItem.SetPaymentType(paymentType);
            }

            newItem.CreatedAt = DateTime.Now;
            newItem.UpdatedAt = DateTime.Now;
            newItem.LastModifiedDate = DateTime.Now;
            purchaseItems = await PurchaseTrackerService.AddPurchaseItem(selectedListKey, newItem);
            newItem = new PurchaseTrackerItem();
            paymentType = "";
            errorMessage = null;
            await toast.ShowToast("Item added successfully", "success");
            isAddingItem = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding item: {ex.Message}";
            await toast.ShowToast("Failed to add item", "error");
        }
    }

    private async Task UpdatePurchaseList()
    {
        try
        {
            // Ensure all dates are properly formatted before sending to OneDrive
            foreach (var item in purchaseItems)
            {
                // Remove time component from dates to ensure consistent date handling
                if (item.DepositPaymentDate.HasValue)
                    item.DepositPaymentDate = item.DepositPaymentDate.Value.Date;
                if (item.WarrantyDate.HasValue)
                    item.WarrantyDate = item.WarrantyDate.Value.Date;
                if (item.ExpectedDeliveryDate.HasValue)
                    item.ExpectedDeliveryDate = item.ExpectedDeliveryDate.Value.Date;
            }

            purchaseItems = await PurchaseTrackerService.UpdatePurchaseListInOneDrive(selectedListKey, purchaseItems);
            errorMessage = null;
            await toast.ShowToast("List updated successfully", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating list: {ex.Message}";
            await toast.ShowToast("Failed to update list", "error");
        }
    }

    private void HandlePaymentTypeChange(ChangeEventArgs e, PurchaseTrackerItem item)
    {
        var type = e.Value?.ToString();
        if (!string.IsNullOrEmpty(type))
        {
            item.SetPaymentType(type);
            StateHasChanged();
        }
    }

    private void TryAgain()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void StartEdit(PurchaseTrackerItem item)
    {
        editingItem = new PurchaseTrackerItem
            {
                ID = item.ID,
                ProductName = item.ProductName,
                Category = item.Category,
                ShopName = item.ShopName,
                ContactPerson = item.ContactPerson,
                ContactNumber = item.ContactNumber,
                InvoiceNumber = item.InvoiceNumber,
                OriginalPrice = item.OriginalPrice,
                DiscountAmount = item.DiscountAmount,
                DiscountPercentage = item.DiscountPercentage,
                ItemPrice = item.ItemPrice,
                PaymentType = item.PaymentType,
                PaymentProgress = item.PaymentProgress,
                IsItemReceived = item.IsItemReceived,
                // Add these missing date properties
                DepositPaymentDate = item.DepositPaymentDate,
                WarrantyDate = item.WarrantyDate,
                ExpectedDeliveryDate = item.ExpectedDeliveryDate,
                // Keep track of creation and modification dates
                CreatedAt = item.CreatedAt,
                UpdatedAt = DateTime.Now,
                LastModifiedDate = DateTime.Now,
                DeletedDate = item.DeletedDate,
                IsDeleted = item.IsDeleted
            };
        if (item.PaymentProgress == "Free")
            paymentType = "free";
        else if (item.PaymentProgress == "100%")
            paymentType = "full";
        else if (item.PaymentProgress != "0%")
            paymentType = "partial";

    }

    private void CancelEdit()
    {
        editingItem = null;
    }

    private async Task SaveEdit()
    {
        var item = purchaseItems.FirstOrDefault(i => i.ID == editingItem.ID);
        if (item != null)
        {
            // Update basic properties
            item.ProductName = editingItem.ProductName;
            item.Category = editingItem.Category;
            item.ShopName = editingItem.ShopName;
            item.ContactPerson = editingItem.ContactPerson;
            item.ContactNumber = editingItem.ContactNumber;
            item.InvoiceNumber = editingItem.InvoiceNumber;
            item.OriginalPrice = editingItem.OriginalPrice;
            item.DiscountAmount = editingItem.DiscountAmount;
            item.DiscountPercentage = editingItem.DiscountPercentage;
            item.ItemPrice = editingItem.ItemPrice;
            item.PaymentType = editingItem.PaymentType;
            item.PaymentProgress = editingItem.PaymentProgress;
            item.IsItemReceived = editingItem.IsItemReceived;

            // Update date properties
            item.DepositPaymentDate = editingItem.DepositPaymentDate;
            item.WarrantyDate = editingItem.WarrantyDate;
            item.ExpectedDeliveryDate = editingItem.ExpectedDeliveryDate;

            // Update metadata
            item.UpdatedAt = DateTime.Now;
            item.LastModifiedDate = DateTime.Now;

            item.CalculateValues();
        }

        editingItem = null;
        await UpdatePurchaseList();
        await toast.ShowToast("Item updated successfully", "success");
    }

    private decimal GetTotalCost()
    {
        return purchaseItems.Where(i => !i.IsDeleted).Sum(i => i.ItemPrice ?? 0m);
    }

    private decimal GetTotalPendingPayment()
    {
        return purchaseItems
            .Where(i => !i.IsDeleted)
            .Sum(i => (i.ItemPrice ?? 0m) - ((i.TotalPaid ?? 0m) + (i.DepositAmount ?? 0m)));
    }

    private decimal GetCategoryTotal(string category)
    {
        return purchaseItems
            .Where(i => i.Category == category && !i.IsDeleted)
            .Sum(i => i.ItemPrice ?? 0m);
    }

    private decimal GetCategoryPaymentProgress(string category)
    {
        var items = purchaseItems
            .Where(i => i.Category == category && !i.IsDeleted && i.PaymentProgress != "Free")
            .ToList();

        if (!items.Any()) return 0;

        var totalPrice = items.Sum(i => i.ItemPrice ?? 0m);
        if (totalPrice == 0) return 0;

        var totalPaid = items.Sum(i => (i.TotalPaid ?? 0m) + (i.DepositAmount ?? 0m));
        return (totalPaid / totalPrice) * 100m;
    }

    private decimal GetOverallPaymentProgress()
    {
        var items = purchaseItems.Where(i => !i.IsDeleted && i.PaymentProgress != "Free").ToList();
        if (!items.Any()) return 0;

        var totalPrice = items.Sum(i => i.ItemPrice ?? 0m);
        if (totalPrice == 0) return 0;

        var totalPaid = items.Sum(i => (i.TotalPaid ?? 0m) + (i.DepositAmount ?? 0m));
        return (totalPaid / totalPrice) * 100m;
    }

    private string GetPaymentStatusClass(PurchaseTrackerItem item)
    {
        return item.PaymentProgress switch
        {
            "Free" => "status-free",
            "100%" => "status-paid",
            "0%" => "status-unpaid",
            _ => "status-partial"
        };
    }

    private void ToggleCategoryExpand(string category)
    {
        if (expandedCategories.Contains(category))
        {
            expandedCategories.Remove(category);
        }
        else
        {
            expandedCategories.Add(category);
        }
    }

    private bool IsCategoryExpanded(string category)
    {
        return expandedCategories.Contains(category);
    }

    private string FormatCurrency(decimal? value)
    {
        if (!value.HasValue) return "RM 0.00";
        return $"RM {value.Value:N2}";
    }

    private string FormatPercentage(decimal value)
    {
        return $"{value:F1}";
    }
    private string GetDeliveryDateStatus(DateTime? date)
    {
        if (!date.HasValue) return "";

        var daysUntil = GetDaysUntil(date);

        if (daysUntil == 0) return "today";
        if (daysUntil < 0) return "passed";
        if (daysUntil <= 7) return "near";
        return "upcoming";
    }

    private string GetWarrantyDateStatus(DateTime? date)
    {
        if (!date.HasValue) return "";

        var daysUntil = GetDaysUntil(date);

        if (daysUntil == 0) return "today";
        if (daysUntil < 0) return "expired";
        if (daysUntil <= 30) return "near";
        return "upcoming";
    }

    private int GetDaysUntil(DateTime? date)
    {
        if (!date.HasValue) return 0;
        return (date.Value.Date - DateTime.Today).Days;
    }

    private string GetDateStatusText(int days, string type)
    {
        if (days == 0) return "Today";
        if (days < 0)
        {
            var pastDays = Math.Abs(days);
            return type == "warranty" ?
                $"Expired {pastDays} {(pastDays == 1 ? "day" : "days")} ago" :
                $"Due {pastDays} {(pastDays == 1 ? "day" : "days")} ago";
        }
        return $"In {days} {(days == 1 ? "day" : "days")}";
    }
}


