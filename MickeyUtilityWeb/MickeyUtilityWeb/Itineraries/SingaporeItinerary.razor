@page "/sgitinerary"
@using MickeyUtilityWeb.Models
@using MickeyUtilityWeb.Services
@using MickeyUtilityWeb.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.Forms
@inject SGItineraryService ItineraryService
@inject ExcelApiService ExcelApiService
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime JSRuntime

<link href="css/Itinerary/SGItineraryEdit.css" rel="stylesheet" />
<link href="css/Shared/Toast.css" rel="stylesheet" />
<link href="css/Shared/Icon.css" rel="stylesheet" />

<Toast @ref="toastComponent" />

<AuthorizeView>
    <Authorized>
        <div class="sg-itinerary-container">
            <h1 class="sg-itinerary-title">Singapore Itinerary</h1>

            @if (isLoading)
            {
                <div class="sg-itinerary-loading">
                    <div class="sg-itinerary-spinner"></div>
                </div>
            }
            else if (errorMessage != null)
            {
                <div class="sg-itinerary-error">
                    @errorMessage
                    <button class="sg-itinerary-btn sg-itinerary-btn-danger" @onclick="TryAgain">Try Again</button>
                </div>
            }
            else
            {
                <div class="sg-itinerary-file-upload">
                    <InputFile OnChange="@HandleFileUpload" accept=".xlsx" />
                    <button class="sg-itinerary-btn sg-itinerary-btn-primary" @onclick="UploadExcel" disabled="@(!isFileSelected)">
                        Upload Excel
                    </button>
                </div>

                <table class="sg-itinerary-table">
                    <thead>
                        <tr>
                            <th>Day</th>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Activity</th>
                            <th>Icon</th>
                            <th>Location</th>
                            <th>Completed</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in itineraryItems)
                        {
                            <tr>
                                <td><input class="sg-itinerary-form-control" @bind="item.Day" /></td>
                                <td><input class="sg-itinerary-form-control" type="date" @bind="item.Date" @bind:format="yyyy-MM-dd" /></td>
                                <td><input class="sg-itinerary-form-control" @bind="item.TimeString" /></td>
                                <td><input class="sg-itinerary-form-control" @bind="item.Activity" /></td>
                                <td>
                                    <select @bind="item.Icon" class="sg-itinerary-form-control">
                                        @foreach (var icon in icons)
                                        {
                                            <option value="@icon.Key">
                                                <span class="@($"itinerary-icon-{icon.Key}")"></span> @icon.Value
                                            </option>
                                        }
                                    </select>
                                </td>
                                <td><input class="sg-itinerary-form-control" @bind="item.Location" /></td>
                                <td>
                                    <div class="sg-itinerary-form-check">
                                        <input class="sg-itinerary-form-check-input" type="checkbox" @bind="item.IsChecked" id="@($"flexSwitchCheck{item.Day}")" />
                                    </div>
                                </td>
                                <td>
                                    <button class="sg-itinerary-btn sg-itinerary-btn-danger" @onclick="() => DeleteItem(item)">Delete</button>
                                </td>
                            </tr>
                        }
                        <tr>
                            <td><input class="sg-itinerary-form-control" @bind="newItem.Day" placeholder="Day" /></td>
                            <td><input class="sg-itinerary-form-control" type="date" @bind="newItem.Date" @bind:format="yyyy-MM-dd" /></td>
                            <td><input class="sg-itinerary-form-control" @bind="newItem.TimeString" placeholder="Time" /></td>
                            <td><input class="sg-itinerary-form-control" @bind="newItem.Activity" placeholder="Activity" /></td>
                            <td>
                                <select @bind="newItem.Icon" class="sg-itinerary-form-control">
                                    @foreach (var icon in icons)
                                    {
                                        <option value="@icon.Key">
                                            <span class="@($"itinerary-icon-{icon.Key}")"></span> @icon.Value
                                        </option>
                                    }
                                </select>
                            </td>
                            <td><input class="sg-itinerary-form-control" @bind="newItem.Location" placeholder="Location" /></td>
                            <td>
                                <div class="sg-itinerary-form-check">
                                    <input class="sg-itinerary-form-check-input" type="checkbox" @bind="newItem.IsChecked" id="flexSwitchCheckNew" />
                                </div>
                            </td>
                            <td>
                                <button class="sg-itinerary-btn sg-itinerary-btn-success" @onclick="AddNewItem">Add</button>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <button @onclick="SaveChanges" class="sg-itinerary-btn sg-itinerary-btn-primary">Save Changes</button>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="sg-itinerary-error">
            You need to log in to access the itinerary.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ItineraryItem> itineraryItems = new List<ItineraryItem>();
    private ItineraryItem newItem = new ItineraryItem { Date = DateTime.Today };
    private bool isLoading = true;
    private string errorMessage;
    private IBrowserFile uploadedFile;
    private bool isFileSelected = false;
    private Toast toastComponent;

    private Dictionary<string, string> icons = new Dictionary<string, string>
    {
        {"plane", "Flight"},
        {"hotel", "Hotel"},
        {"utensils", "Restaurant"},
        {"coffee", "Cafe"},
        {"camera", "Sightseeing"},
        {"hiking", "Hiking"},
        {"beach", "Beach"},
        {"museum", "Museum"},
        {"shopping-cart", "Shopping"},
        {"train", "Train"},
        {"bus", "Bus"},
        {"taxi", "Taxi"},
        {"bicycle", "Cycling"},
        {"landmark", "Landmark"},
        {"ticket", "Event"},
        {"bed", "Rest"},
        {"sunrise", "Morning Activity"},
        {"sunset", "Evening Activity"},
        {"cocktail", "Nightlife"},
        {"suitcase", "Packing"}
    };

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (authState.User.Identity.IsAuthenticated)
        {
            await LoadItinerary();
        }
    }

    private async Task LoadItinerary()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            var tokenResult = await TokenProvider.RequestAccessToken();
            if (tokenResult.TryGetToken(out var token))
            {
                itineraryItems = await ItineraryService.GetItineraryFromOneDrive();
            }
            else
            {
                errorMessage = "Failed to acquire access token.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading itinerary: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            await ItineraryService.UpdateItineraryInOneDrive(itineraryItems);
            errorMessage = null;
            await toastComponent.ShowToast("Changes saved successfully!", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving changes: {ex.Message}";
            await toastComponent.ShowToast($"Error saving changes: {ex.Message}", "error");
        }
    }

    private void TryAgain()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task AddNewItem()
    {
        if (string.IsNullOrWhiteSpace(newItem.Day) || string.IsNullOrWhiteSpace(newItem.Activity))
        {
            errorMessage = "Day and Activity are required fields.";
            await toastComponent.ShowToast("Day and Activity are required fields.", "warning");
            return;
        }

        try
        {
            await ItineraryService.AddItineraryItem(newItem);
            itineraryItems.Add(newItem);
            newItem = new ItineraryItem { Date = DateTime.Today };
            errorMessage = null;
            await SaveChanges();
            await toastComponent.ShowToast("New item added successfully!", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding new item: {ex.Message}";
            await toastComponent.ShowToast($"Error adding new item: {ex.Message}", "error");
        }
    }

    private async Task DeleteItem(ItineraryItem item)
    {
        try
        {
            await ItineraryService.DeleteItineraryItem(item);
            itineraryItems.Remove(item);
            errorMessage = null;
            await toastComponent.ShowToast("Item deleted successfully!", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting item: {ex.Message}";
            await toastComponent.ShowToast($"Error deleting item: {ex.Message}", "error");
        }
    }

    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        isFileSelected = true;
    }

    private async Task UploadExcel()
    {
        if (uploadedFile == null)
        {
            errorMessage = "Please select a file to upload.";
            await toastComponent.ShowToast("Please select a file to upload.", "warning");
            return;
        }

        try
        {
            isLoading = true;
            var fileContent = new byte[uploadedFile.Size];
            await uploadedFile.OpenReadStream().ReadAsync(fileContent);

            await ItineraryService.UploadExcel(fileContent);

            await LoadItinerary();

            await toastComponent.ShowToast("Excel file content uploaded and itinerary updated successfully!", "success");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error uploading Excel file content: {ex.Message}";
            await toastComponent.ShowToast($"Error uploading Excel file content: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            isFileSelected = false;
            uploadedFile = null;
        }
    }
}